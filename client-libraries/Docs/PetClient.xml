<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetDogAsync(RequestContext)">
<example>
This sample shows how to call GetDogAsync and parse the result.
<code><![CDATA[
var client = new PetClient();

Response response = await client.GetDogAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("wagsTailWhenHappy").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Dog</c>:
<code>{
  name: string, # Required. The dog&apos;s name
  wagsTailWhenHappy: boolean, # Optional. Whether the dog wags their tail when happy
}
</code>

</remarks>
    </member>
    <member name="GetDog(RequestContext)">
<example>
This sample shows how to call GetDog and parse the result.
<code><![CDATA[
var client = new PetClient();

Response response = client.GetDog();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("wagsTailWhenHappy").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Dog</c>:
<code>{
  name: string, # Required. The dog&apos;s name
  wagsTailWhenHappy: boolean, # Optional. Whether the dog wags their tail when happy
}
</code>

</remarks>
    </member>
    <member name="PutCatAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call PutCatAsync and parse the result.
<code><![CDATA[
var client = new PetClient();

var data = new {};

Response response = await client.PutCatAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PutCatAsync with all request content, and how to parse the result.
<code><![CDATA[
var client = new PetClient();

var data = new {
    eatsMiceYet = true,
    likesMilk = true,
};

Response response = await client.PutCatAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

<details><summary>Kitten</summary>Schema for <c>Kitten</c>:
<code>{
  eatsMiceYet: boolean, # Optional.
  likesMilk: boolean, # Optional.
}
</code>
</details>

</remarks>
    </member>
    <member name="PutCat(RequestContent,RequestContext)">
<example>
This sample shows how to call PutCat and parse the result.
<code><![CDATA[
var client = new PetClient();

var data = new {};

Response response = client.PutCat(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PutCat with all request content, and how to parse the result.
<code><![CDATA[
var client = new PetClient();

var data = new {
    eatsMiceYet = true,
    likesMilk = true,
};

Response response = client.PutCat(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

<details><summary>Kitten</summary>Schema for <c>Kitten</c>:
<code>{
  eatsMiceYet: boolean, # Optional.
  likesMilk: boolean, # Optional.
}
</code>
</details>

</remarks>
    </member>
    <member name="PostKittenAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call PostKittenAsync and parse the result.
<code><![CDATA[
var client = new PetClient();

var data = new {};

Response response = await client.PostKittenAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PostKittenAsync with all request content, and how to parse the result.
<code><![CDATA[
var client = new PetClient();

var data = new {
    eatsMiceYet = true,
    likesMilk = true,
};

Response response = await client.PostKittenAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Kitten</c>:
<code>{
  eatsMiceYet: boolean, # Optional.
  likesMilk: boolean, # Optional.
}
</code>

</remarks>
    </member>
    <member name="PostKitten(RequestContent,RequestContext)">
<example>
This sample shows how to call PostKitten and parse the result.
<code><![CDATA[
var client = new PetClient();

var data = new {};

Response response = client.PostKitten(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PostKitten with all request content, and how to parse the result.
<code><![CDATA[
var client = new PetClient();

var data = new {
    eatsMiceYet = true,
    likesMilk = true,
};

Response response = client.PostKitten(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Kitten</c>:
<code>{
  eatsMiceYet: boolean, # Optional.
  likesMilk: boolean, # Optional.
}
</code>

</remarks>
    </member>
  </members>
</doc>